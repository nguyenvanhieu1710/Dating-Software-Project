const pool = require("./index");

class DatabaseHelper {
  /**
   * Th·ª±c hi·ªán query v·ªõi parameters
   * @param {string} text - SQL query
   * @param {Array} params - Parameters cho query
   * @returns {Promise} - Promise v·ªõi k·∫øt qu·∫£
   */
  static async query(text, params = []) {
    const start = Date.now();
    try {
      const res = await pool.query(text, params);
      const duration = Date.now() - start;
      console.log("üìä Executed query", { text, duration, rows: res.rowCount });
      return res;
    } catch (error) {
      console.error("‚ùå Database query error:", error);
      throw error;
    }
  }

  /**
   * L·∫•y m·ªôt row duy nh·∫•t
   * @param {string} text - SQL query
   * @param {Array} params - Parameters cho query
   * @returns {Promise} - Promise v·ªõi row ƒë·∫ßu ti√™n
   */
  static async getOne(text, params = []) {
    const res = await this.query(text, params);
    return res.rows[0];
  }

  /**
   * L·∫•y t·∫•t c·∫£ rows
   * @param {string} text - SQL query
   * @param {Array} params - Parameters cho query
   * @returns {Promise} - Promise v·ªõi t·∫•t c·∫£ rows
   */
  static async getAll(text, params = []) {
    const res = await this.query(text, params);
    return res.rows;
  }

  /**
   * Th·ª±c hi·ªán transaction
   * @param {Function} callback - Function ch·ª©a c√°c queries trong transaction
   * @returns {Promise} - Promise v·ªõi k·∫øt qu·∫£
   */
  static async transaction(callback) {
    const client = await pool.connect();
    try {
      await client.query("BEGIN");
      const result = await callback(client);
      await client.query("COMMIT");
      return result;
    } catch (error) {
      await client.query("ROLLBACK");
      throw error;
    } finally {
      client.release();
    }
  }

  /**
   * Ki·ªÉm tra k·∫øt n·ªëi database
   * @returns {Promise<boolean>} - True n·∫øu k·∫øt n·ªëi th√†nh c√¥ng
   */
  static async testConnection() {
    try {
      await this.query("SELECT NOW()");
      return true;
    } catch (error) {
      console.error("‚ùå Database connection test failed:", error);
      return false;
    }
  }
}

module.exports = DatabaseHelper;
